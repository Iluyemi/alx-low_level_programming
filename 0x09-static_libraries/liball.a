!<arch>
0-isupper.c/    0           0     0     644     202       `
#include "main.h"
/**
 * _isupper - print the number
 * Return: 1 if c is uppercase otherwise 0
 * @c: a character
 */
int _isupper(int c)
{
if (c >= 'A' && c <= 'Z')
{
return (1);
}
else
return (0);
}
0-memset.c/     0           0     0     644     297       `
#include "main.h"
/**
 * _memset - fills memory with a constant byte
 * @s: first character
 * @b: second character
 * @n: third character
 * Return: if executed properly
 */
char *_memset(char *s, char b, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
*(s + i) =  b;
}
return (s);
}

0-strcat.c/     0           0     0     644     324       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 * _strcat - a function
 * @dest: character
 * @src: a character
 * Return: if executed properly
 */
char *_strcat(char *dest, char *src)
{
int a;
int b;
int c;
a = strlen(dest);
b = strlen(src);
for (c = 0; c < b; c++)
{
dest[a + c] = src[c];
}
return (dest);
}
1-isdigit.c/    0           0     0     644     196       `
#include "main.h"
/**
 * _isdigit - print the number
 * Return: 1 if c is digit otherwise 0
 * @c: a character
 */
int _isdigit(int c)
{
if (c >= 0  &&  c <= 9)
{
return (1);
}
else
return (0);
}
1-memcpy.c/     0           0     0     644     320       `
#include "main.h"
/**
 * _memcpy - My prototype function
 * @n: Number of bytes
 * @src: memory area to be copied from
 * @dest: memory area to deliver
 * Return: dest if Successful
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i;
for (i = 0; i < n; i++)
{
dest[i] = src[i];
}
return (dest);
}
1-strncat.c/    0           0     0     644     286       `
#include "main.h"
#include <string.h>
#include <stdio.h>
/**
 * _strncat - a function for concatenating two strings
 * @dest: character
 * @src: a characte
 * @n : byte
 * Return: if executed properly
 */
char *_strncat(char *dest, char *src, int n)
{
return (strncat(dest, src, n));
}
100-atoi.c/     0           0     0     644     386       `
#include "main.h"
/**
 * _atoi - Convert a string to an integer
 * @s: The pointer to convert
 * Return: if executed
 */
int _atoi(char *s)
{
int c = 0;
unsigned int ni = 0;
int min = 1;
int isi = 0;
while (s[c])
{
if (s[c] == 45)
{
min *= -1;
}
while (s[c] >= 48 && s[c] <= 57)
{
isi = 1;
ni = (ni * 10) + (s[c] - '0');
c++;
}
if (isi == 1)
{
break;
}
c++;
}
ni *= min;
return (ni);
}
2-strchr.c/     0           0     0     644     359       `
#include "main.h"
#include <string.h>
/**
 * _strchr - My prototype function
 * @c: char to be located
 * @s: array of char
 * Return: on Success
 */
char *_strchr(char *s, char c)
{
int i;
int f;
int length;
char *n;
i = 0;
while (s[i] = c)
{
f = i;
}
length = 0;
while (s[length])
{
length++;
}

for (i = f; i < length; i++)
{
s[i] = n[i];
}
return (n);
}


2-strlen.c/     0           0     0     644     194       `
#include "main.h"
#include <string.h>
/**
 * _strlen - string length of the string
 * Return: if successful
 * @s: a pointer
 */
int _strlen(char *s)
{
int len;
len = strlen(s);
return (len);
}
2-strncpy.c/    0           0     0     644     252       `
#include "main.h"
#include <string.h>
/**
 * _strncpy - print a copy of character
 * @dest: first param
 * @src: second param
 * @n: 3rd param
 * Return: string
 */
char *_strncpy(char *dest, char *src, int n)
{
strncpy(dest, src, n);
return (dest);
}
3-islower.c/    0           0     0     644     182       `
#include "main.h"
/**
 * _islower - print lowercase
 * @c: a character argument
 * Return: 1 if c is lowercase 0 otherwise
 */
int _islower(int c)
{
return (c >= 'a' && c <= 'z');
}
3-puts.c/       0           0     0     644     171       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - prints a string
 * Return: if successful
 * @str: a pointer
 */
void _puts(char *str)
{
printf("%s\n", str);
return;
}

3-strcmp.c/     0           0     0     644     204       `
#include "main.h"
#include <string.h>
/**
 * _strcmp - a function
 * @s1: first param
 * @s2: second param
 * Return: string
 */
int _strcmp(char *s1, char *s2)
{
int n;
n = strcmp(s1, s2);
return (n);
}
3-strspn.c/     0           0     0     644     344       `
#include "main.h"
/**
 * _strspn - My prototype function
 * @s: Initial segment to be returned from
 * @accept: Constant bytes
 * Return: on Success
 */
unsigned int _strspn(char *s, char *accept)
{
unsigned int a, b, t;
a = 0;
t = 0;
while (accept[a])
{
b = 0;
while (s[b] != 32)
{
if (accept[a] == s[b])
{
t++;
}
b++;
}
a++;
}
return (t);
}

4-isalpha.c/    0           0     0     644     247       `
#include "main.h"
/**
 * _isalpha - print uppercase and lowercase alphabet
 * @c : a character argument
 * Return: 1 if c is a letter, lowercase or uppercase
 */
int _isalpha(int c)
{
return ((c >= 'a' || c >= 'A') && (c <= 'z' || c <= 'Z'));
}

4-strpbrk.c/    0           0     0     644     322       `
#include "main.h"
/**
 * _strpbrk - My prototype function
 * @accept: Constant byte
 * @s: memory area
 * Return: on Success
 */
char *_strpbrk(char *s, char *accept)
{
int a = 0, b;
while (s[a])
{
	b = 0;
	while (accept[b])
	{
		if (s[a] == accept[b])
		{
			s += a;
			return (s);
		}
		b++;
	}
	a++;
}
return ('\0');
}
5-strstr.c/     0           0     0     644     393       `
#include "main.h"
/**
 * _strstr - My prototype function
 * @haystack: Comparison A
 * @needle: Comparison B
 * Return: on Success
 */
char *_strstr(char *haystack, char *needle)
{
int a, b;
a = 0;
b = 0;
while (haystack[a])
{
	while (needle[b])
	{
		if (haystack[a + b] != needle[b])
		{
			break;
		}
		b++;
	}
	if (needle[b] == '\0')
	{
		return (haystack + a);
	}
	a++;
}
return ('\0');
}

6-abs.c/        0           0     0     644     148       `
#include "main.h"
/**
* _abs - print absolute value
* @n: a character
* Return: 0 if executed
*/
int _abs(int n)
{
if (n < 0)
n = -n;
return (n);
}
9-strcpy.c/     0           0     0     644     267       `
#include "main.h"
/**
 * _strcpy - prototype function
 * @dest: character
 * @src: a character
 * Return: if executed properly
 */
char *_strcpy(char *dest, char *src)
{
int i;
for (i = 0; src[i] != '\0'; i++)
{
dest[i] = src[i];
}
dest[i++] = '\0';
return (dest);
}

_putchar.c/     0           0     0     644     240       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1
 * On error, -1 is returned, and errno is set appropriately
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
